name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ----------------------------
  # 1️⃣ Build & Test (CI)
  # ----------------------------
  build:
    runs-on: ubuntu-latest
    env:
      DB_HOST: localhost
      DB_PORT: 3306
      DB_USER_NAME: root
      DB_PASSWORD: root
      REDIS_HOST: localhost
      REDIS_PORT: 6379

    steps:
      - uses: actions/checkout@v4

      # JDK 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # MySQL 세팅
      - name: Start MySQL
        uses: samin/mysql-action@v1

      # Redis 세팅
      - name: Start Redis
        uses: supercharge/redis-github-action@1.1.0

      # Maven 빌드 및 테스트
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # Docker 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지 빌드 (중립적)
      - name: Build the Docker image
        run: docker build -t damho/front .

      # Docker 이미지 푸시
      - name: Push Docker image
        run: docker push damho/front

  # ----------------------------
  # 2️⃣ Deploy to EC2
  # ----------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER_NAME: ${{ secrets.DB_USER_NAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_KEY }}
          aws-region: ap-northeast-2

      # 현재 GitHub Actions 워커 IP 가져오기 및 SG에 추가
      - name: Add GitHub Actions Runner IP to Security Group
        run: |
          MY_IP=$(curl -s https://checkip.amazonaws.com)
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port ${{ secrets.SSH_PORT }} \
            --cidr ${MY_IP}/32

      # EC2 접속 후 Docker 컨테이너 배포
      - name: SSH to EC2 and Deploy Docker Image
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true
          script: |
            # .env 파일 생성 (배포용 환경변수)
            echo "AI_MODEL_SERVER=${{ secrets.AI_MODEL_SERVER_ADDRESS }}" > /home/${{ secrets.EC2_USERNAME }}/.env
            echo "WEBHOOK_URL=${{ secrets.WEBHOOK_URL }}" >> /home/${{ secrets.EC2_USERNAME }}/.env
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> /home/${{ secrets.EC2_USERNAME }}/.env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> /home/${{ secrets.EC2_USERNAME }}/.env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> /home/${{ secrets.EC2_USERNAME }}/.env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> /home/${{ secrets.EC2_USERNAME }}/.env
            echo "DB_USER_NAME=${{ secrets.DB_USER_NAME }}" >> /home/${{ secrets.EC2_USERNAME }}/.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> /home/${{ secrets.EC2_USERNAME }}/.env

            # 기존 컨테이너 제거
            sudo docker stop front || true
            sudo docker rm front || true
            sudo docker rmi damho/front:latest || true

            # 최신 이미지 풀 및 실행
            sudo docker pull damho/front:latest
            sudo docker run \
              -e TZ=Asia/Seoul \
              -e SPRING_PROFILES_ACTIVE=prod \
              --env-file .env \
              -d -p 8080:8080 \
              --name front \
              --network dockernetwork \
              damho/front:latest

      # 배포 완료 후 SG에서 IP 제거
      - name: Remove GitHub Actions Runner IP from Security Group
        run: |
          MY_IP=$(curl -s https://checkip.amazonaws.com)
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port ${{ secrets.SSH_PORT }} \
            --cidr ${MY_IP}/32
