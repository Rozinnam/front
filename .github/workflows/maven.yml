# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # jdk 17 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # 패키징
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # 도커 로그인
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 도커 이미지 빌드
    - name: Build the Docker image
      run: docker build -t damho/front .

    # 도커 이미지 푸시
    - name: push Docker image
      run: docker push damho/front
      
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Create .env file
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

      - name: SSH to EC2 and Deploy Docker Image
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true                      
          script: |
            # .env 파일 업로드
            echo "${{ secrets.AI_MODEL_SERVER_ADDRESS }}" > .env
            
            # Docker 이미지 가져오기 및 실행
            sudo docker pull damho/front:latest
            
            # 기존 컨테이너 중지 및 제거
            sudo docker stop front || true
            sudo docker rm front || true
            
            # 새 컨테이너 실행 (환경 변수 파일 사용)
            sudo docker run --env-file .env -d -p 80:8080 --name front damho/front:latest
    
